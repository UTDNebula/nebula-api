# GraphQL removes the need for the type field, and doesn't support static values in schema,
# so there are no shared fields for requirements, so we are using a Union type
# and not using the ENUM example below.

union Requirement = CourseRequirement | SectionRequirement | ExamRequirement | MajorRequirement | MinorRequirement | GPARequirement | ConsentRequirement | CollectionRequirement | HoursRequirement | OtherRequirement | ChoiceRequirement | LimitRequirement | CoreRequirement

type CourseRequirement { 
    class_reference: Course! # @TODO: rename to course?
    minimum_grade: String!
}

type SectionRequirement {
    section_reference: Section! # @TODO: rename to section?
}

type ExamRequirement {
    exam_reference: Exam! # @TODO: rename to exam?
    minimum_score: Int!
}

type MajorRequirement {
    major: String!
}

type MinorRequirement {
    minor: String!
}

type GPARequirement {
    minimum: Float!
    subset: String!
}

type ConsentRequirement {
    granter: String! 
}

type CollectionRequirement {
    name: String!
    required: Int!
    options: [Requirement!]!
}

type HoursRequirement {
    required: Int!
    options: [CourseRequirement!]!
}

type OtherRequirement {
    description: String!
    condition: String!
}

# @TODO: Do we even need the ChoiceRequirement type?
# Isn't a CollectionRequirement with required == 1 functionally equivalent?
type ChoiceRequirement {
    choices: CollectionRequirement!
}

type LimitRequirement {
    max_hours: Int!
}

type CoreRequirement {
    core_flag: String!
    hours: Int!
}


# SHOULD NOT USE! Read comment at top of file

# With ENUM

# enum convention is all caps, breaks our schema

# enum RequirementType {
#     COURSE
#     SECTION
#     EXAM
#     MAJOR
#     MINOR
#     GPA
#     CONSENT
#     COLLECTION
#     HOURS
#     OTHER
# }

#interface Requirement {
#    type: RequirementType!
#}

# type CourseRequirement implements Requirement {
#     type: RequirementType!
#     class_reference: ID!
#     minimum_grade: String!
# }

# type SectionRequirement implements Requirement {
#     type: RequirementType!
#     section_reference: ID!
# }

# type ExamRequirement implements Requirement {
#     type: RequirementType!
#     exam_reference: ID!
#     minimum_score: number!
# }

# type MajorRequirement implements Requirement {
#     type: RequirementType!
#     major: String!
# }

# type MinorRequirement implements Requirement {
#     type: RequirementType!
#     minor: String!
# }

# type GPARequirement implements Requirement {
#     type: RequirementType!
#     minimum: number!
#     subset: String!
# }

# type ConsentRequirement implements Requirement {
#     type: RequirementType!
#     granter: String! 
# }

# type OtherRequirement implements Requirement {
#     type: RequirementType!
#     description: String!
#     condition: String!
# }

# type CollectionRequirement implements Requirement {
#     type: RequirementType!
#     name: String!
#     required: number!
#     options: [Requirement!]!
# }

# type HoursRequirement implements Requirement {
#     type: RequirementType!
#     required: number!
#     options: [CourseRequirement!]!
# }

# type ChoiceRequirement implements Requirement {
#     type: RequirementType!
#     choices: CollectionRequirement!
# }

# type LimitRequirement implements Requirement {
#     type: RequirementType!
#     max_hours: number!
# }

# type CoreRequirement implements Requirement {
#     type: RequirementType!
#     core_flag: String!
#     hours: number!
# }
